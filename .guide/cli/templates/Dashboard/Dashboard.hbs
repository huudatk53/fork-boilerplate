import React, { useState, useCallback, useMemo } from 'react';
import { Switch, Route, useLocation } from 'react-router-dom';

import LeftSidebar from './LeftSidebar';
import TopNavigation from './TopNavigation';
import SystemDesign from '../../src/SystemDesign';
import loadable from '@/utils/loadable';
import { Breadcrumb, Icon, Loader, ScrollUp } from '@/fork-ui/core';
import { mapBreadcrumb } from '../map-config';

const fallback = (
  <div
    className="flex items-center justify-center"
    style={ {
      height: '100vh',
    } }
  >
    <Loader.Dots size="2rem" />
  </div>
);

{{#each importers}}
const {{this.key}}Document = loadable(() => import('../_documents/{{this.key}}'), { fallback });
{{/each}}

const Dashboard = ({}) => {
  const [isExpanded, setIsExpanded] = useState(false);
  const toggleExpand = useCallback(() => setIsExpanded(prev => !prev), []);

  const location = useLocation();

  const breadcrumb = useMemo(() => {
    return mapBreadcrumb[location.pathname] || [];
  }, [location.pathname]);

  return (
    <div id="main-admin" className="flex">
      <LeftSidebar isExpanded={isExpanded} />
      <div className="flex-1 flex flex-col">
        <TopNavigation toggleExpand={toggleExpand} isExpanded={isExpanded} />
        {{!-- <Breadcrumb className="m-1">
          {breadcrumb.map(props => (
            <Breadcrumb.Item
              key={props.key}
              title={props.icon ? (<Icon name={props.icon} />) : props.title}
              href={props._href}
            />
          ))}
        </Breadcrumb> --}}
        <div className="flex m-1">
          <div className="flex-1">
            <Switch>
              {{#each importers}}
              <Route path="/document/{{this.keyLowerCase}}" component={ {{this.key}}Document } />
              {{/each}}
              <Route path="/" component={SystemDesign} />
            </Switch>
          </div>
        </div>
      </div>
      <ScrollUp />
    </div>
  )
};

Dashboard.displayName = 'Dashboard';
Dashboard.propTypes = {};
Dashboard.defaultProps = {};

export default Dashboard;
